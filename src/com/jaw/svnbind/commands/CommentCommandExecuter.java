package com.jaw.svnbind.commands;

import org.apache.xmlrpc.client.XmlRpcClient;

import com.google.inject.Inject;
import com.jaw.svnbind.ConfigurationManager;
import com.jaw.svnbind.SvnHelpers;
import com.jaw.svnbind.dao.BugzillaDao;
import com.jaw.svnbind.dao.SvnDao;

public class CommentCommandExecuter {
	private ConfigurationManager configurationManager;
	private BugzillaDao bugzillaDao;
	private SvnDao svnDao;
	private SvnHelpers svnHelpers;
	private PasswordCommandExecuter passwordCommandExecuter;

	@Inject
	public CommentCommandExecuter(ConfigurationManager configurationManager,
			BugzillaDao bugzillaDao, SvnDao svnDao, SvnHelpers svnHelpers,PasswordCommandExecuter passwordCommandExecuter) {
		this.bugzillaDao = bugzillaDao;
		this.configurationManager = configurationManager;
		this.svnDao = svnDao;
		this.svnHelpers = svnHelpers;
		this.passwordCommandExecuter = passwordCommandExecuter;
	}

	public int execute(Command command) throws Exception {
		int result = 0;
		// /get name of svn user and convert to bugzilla
		String svnUser = null;
		try {
			svnUser = svnDao.getSvnUserViaRev(command.getRepoPath(),
					command.getRevision()).trim();
			if (svnUser == null) {
				throw new Exception();
			}
		} catch (Exception e) {
			throw new Exception("Unable to find svn user.");
		}
		String bugzillaUser = configurationManager.getConfig().getString(
				"users." + svnUser + ".bugzillaUserId");
		String bugzillaPassword = configurationManager.getConfig().getString(
				"users." + svnUser + ".bugzillaPassword");
		bugzillaPassword = passwordCommandExecuter.decrypt(bugzillaPassword);
		if (bugzillaUser == null) {
			throw new Exception(
					"Unable to find bugzilla user.  Are may need to add your mapping to the config.xml.  Contact your svn admin for details.");
		}
		if (bugzillaPassword == null) {
			throw new Exception(
					"Unable to find bugzilla password.  Are may need to add your mapping to the config.xml.  Contact your svn admin for details.");
		}

		// get subversion message and parse message looking for the bug id
		String svnMessage = null;
		try {
			svnMessage = svnDao.getMessageViaRev(command.getRepoPath(), command
					.getRevision());
		} catch (Exception e) {
			throw new Exception("Unable to determine svn message.");
		}
		String bugId = svnHelpers.getBugId(svnMessage);
		// get the list of files that where changed in svn for this action
	/*	String listOfChanges = null;
		try {
			listOfChanges = svnDao.getChanged(command.getRepoPath(), command
					.getRevision());
		} catch (Exception e) {
			throw new Exception("Unable to fetch change list form svn.");
		}*/
		// /Generate log message for bugzilla
		StringBuilder bugzillaMsg = new StringBuilder();
		bugzillaMsg.append("Subversion log entry\n");
		bugzillaMsg.append("Subversion userId: " + svnUser + "\n");
		bugzillaMsg.append("Subversion revision: " + command.getRevision()
				+ "\n");
		bugzillaMsg.append("Subversion repository: " + command.getRepoPath()
				+ "\n\n\n");
		bugzillaMsg.append("Subversion checkin message:\n");
		bugzillaMsg.append(svnMessage + "\n");
		//bugzillaMsg.append("The following changed:\n");
		//bugzillaMsg.append(listOfChanges + "\n");
		bugzillaMsg.append("Message generated by jawbind 1.0");
		// call bugzilla
		XmlRpcClient client = null;
		try {
			client = bugzillaDao.login(bugzillaUser, bugzillaPassword);
		} catch (Exception e) {
			throw new Exception("Unable to login to bugzilla. Using "
					+ bugzillaUser + " " + bugzillaPassword);
		}
		try {
			bugzillaDao.addComment(bugzillaMsg.toString(), bugId, client);
		} catch (Exception e) {
			throw new Exception("Unable to add comment to bugzilla. Using "
					+ bugzillaMsg.toString() + " " + bugId);
		}
		bugzillaDao.logout(client);

		return result;
	}

}
